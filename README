# CS111 Lab 1 (Implementing a Bash-like Shell)

## Group Members:

	Ryan Peterman : 704269982
	Sean Wang : 604151638

## Method Overview:

	1. Read input file into a buffer and remove commands as we read it into the buffer
		Status: Done and Verified

	2. Convert input buffer into a linked list of tokens, which are catagorized/labeled operators and commands 
		Status: Done and Verified

	3. Pass through the created linked list of tokens to make sure the ordering is syntactically valid
		Status: Done and Verified

	4. Now we take the valid list of tokens and create a command stream using an operator stack and a command stack
	to create the command trees that will be linked up in our command stream
		Status: Done and Verified

## Function Explanations:

	1. read_file_into_buffer - reads file into a buffer, while parsing out comments. If a file is too large for the starting size of the buffer, then new memory will be allocated using checked_grow_alloc.

	2. convert_to_tokens - Given a buffer with no comments in it, creates a linked list of "tokens" which are catagorized commands and/or operators of significance. Each token keeps track of its line number and what type of token it is for easier error checking later.

	3. check_token_list - Given a list of tokens, checks the syntax/ordering of the commands and operators to make sure that everything is valid.

	4. print_token_list - For Debugging: prints out all token information to standard output in the following format: Type (type): Line Number (#) : Words (words contained).

	5. is_valid - given a character, this function validates that the character is of the list of allowed characters based on the spec

	6. make_basic_stream - given a valid token list, this function converts the token list into a command stream with no depth

	7. solve_newlines - given a simple command stream, this function converts newlines into its corresponding cases

	8. make_advanced_stream - given a valid basic stream, this function uses a command stack and an operator stack to populate the command stream with many command trees

## Data Structures:

	1. Token - a unique operator/command that contains its type (and vs or vs word vs ...), line number, and string containing words if it was of type word.

	2. Token List - a linked list of token_list (nodes) which each contain a token, pointer to the next structure, and pointer to the previous structure

	3. Command Stream - a linked list of commands (each of which branch of into command trees based on the command data structure given). This linked list has a head pointer, current pointer, and a size variable. The current pointer allows us to iterate through the list and also keep track of the end of the list when adding nodes.

	4. Command Stack and Operator Stack - a linked list of commands. Contains a pointer to the top of the stack and also maintains a variable that contains the current size of the stack as well. 